   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"Main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	TimerId,4,4
  20              		.comm	Status,4,4
  21              		.comm	WriteTimerId,4,4
  22              		.comm	WriteTimerStatus,4,4
  23              		.comm	TimerIdReadBytes,4,4
  24              		.comm	StatusReadBytes,4,4
  25              		.comm	settings,40,4
  26              		.comm	gBias,12,4
  27              		.comm	aBias,12,4
  28              		.comm	mBias,12,4
  29              		.comm	gBiasRaw,6,4
  30              		.comm	aBiasRaw,6,4
  31              		.comm	mBiasRaw,6,4
  32              		.comm	_autoCalc,1,1
  33              		.comm	_mAddress,1,1
  34              		.comm	_xgAddress,1,1
  35              		.comm	gRes,4,4
  36              		.comm	aRes,4,4
  37              		.comm	mRes,4,4
  38              		.comm	gx,2,2
  39              		.comm	gy,2,2
  40              		.comm	gz,2,2
  41              		.comm	ax,2,2
  42              		.comm	ay,2,2
  43              		.comm	az,2,2
  44              		.comm	mx,2,2
  45              		.comm	my,2,2
  46              		.comm	mz,2,2
  47              		.comm	temperature,2,2
  48              		.global	readingAllowed
  49              		.data
  52              	readingAllowed:
  53 0000 01       		.byte	1
  54              		.comm	pomiary,120,4
  55              		.section	.text.main,"ax",%progbits
  56              		.align	2
  57              		.global	main
  58              		.thumb
  59              		.thumb_func
  61              	main:
  62              	.LFB117:
  63              		.file 1 "../Main.c"
   1:../Main.c     **** /*
   2:../Main.c     ****  * Main.c
   3:../Main.c     ****  *
   4:../Main.c     ****  *  Created on: 08-02-2016
   5:../Main.c     ****  *      Author: Mateusz
   6:../Main.c     ****  */
   7:../Main.c     **** 
   8:../Main.c     **** 
   9:../Main.c     **** #include <DAVE3.h>			//Declarations from DAVE3 Code Generation (includes SFR declaration)
  10:../Main.c     **** 
  11:../Main.c     **** #include "LSM9DS1_Driver.h"
  12:../Main.c     **** #include "Timer.h"
  13:../Main.c     **** 
  14:../Main.c     **** #define LSM9DS1_M	0x1E // Would be 0x1C if SDO_M is LOW
  15:../Main.c     **** #define LSM9DS1_AG	0x6B // Would be 0x6A if SDO_AG is LOW
  16:../Main.c     **** #define TRUE 1
  17:../Main.c     **** #define FALSE 0
  18:../Main.c     **** 
  19:../Main.c     **** void initLSM9DS1(void);
  20:../Main.c     **** void timerHandlerReadByte(void *T);
  21:../Main.c     **** void timerHandlerReadByte1(void *T);
  22:../Main.c     **** 
  23:../Main.c     **** 
  24:../Main.c     **** typedef struct
  25:../Main.c     **** {
  26:../Main.c     **** 	uint8_t addressDevice;
  27:../Main.c     **** 	uint8_t subAddress;
  28:../Main.c     **** }deviceAddress;
  29:../Main.c     **** 
  30:../Main.c     **** typedef struct
  31:../Main.c     **** {
  32:../Main.c     **** 	uint8_t dane[6];
  33:../Main.c     **** 	deviceAddress adr;
  34:../Main.c     **** }addressAndData;
  35:../Main.c     **** 
  36:../Main.c     **** volatile bool readingAllowed = TRUE;
  37:../Main.c     **** 
  38:../Main.c     **** accel pomiary[20];
  39:../Main.c     **** //OUT_X_L_XL;
  40:../Main.c     **** 
  41:../Main.c     **** #define DELAY 10000
  42:../Main.c     **** 
  43:../Main.c     **** int main(void)
  44:../Main.c     **** {
  64              		.loc 1 44 0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 40
  67              		@ frame_needed = 1, uses_anonymous_args = 0
  68 0000 80B5     		push	{r7, lr}
  69              	.LCFI0:
  70              		.cfi_def_cfa_offset 8
  71              		.cfi_offset 7, -8
  72              		.cfi_offset 14, -4
  73 0002 8AB0     		sub	sp, sp, #40
  74              	.LCFI1:
  75              		.cfi_def_cfa_offset 48
  76 0004 00AF     		add	r7, sp, #0
  77              	.LCFI2:
  78              		.cfi_def_cfa_register 7
  45:../Main.c     **** //	status_t status;		// Declaration of return variable for DAVE3 APIs (toggle comment if required)
  46:../Main.c     **** 
  47:../Main.c     **** 
  48:../Main.c     **** 	DAVE_Init();			// Initialization of DAVE Apps
  79              		.loc 1 48 0
  80 0006 FFF7FEFF 		bl	DAVE_Init
  49:../Main.c     **** 
  50:../Main.c     **** 
  51:../Main.c     **** 	int counter = 0;
  81              		.loc 1 51 0
  82 000a 4FF00003 		mov	r3, #0
  83 000e 7B62     		str	r3, [r7, #36]
  52:../Main.c     **** 	handle_t TimerId;
  53:../Main.c     **** 	uint32_t Status = SYSTM001_ERROR;
  84              		.loc 1 53 0
  85 0010 4FF00203 		mov	r3, #2
  86 0014 FB61     		str	r3, [r7, #28]
  54:../Main.c     **** 
  55:../Main.c     **** 	addressAndData a;
  56:../Main.c     **** 	a.adr.addressDevice = 0x6B;
  87              		.loc 1 56 0
  88 0016 4FF06B03 		mov	r3, #107
  89 001a BB72     		strb	r3, [r7, #10]
  57:../Main.c     **** 	a.adr.subAddress =  OUT_X_L_XL;
  90              		.loc 1 57 0
  91 001c 4FF02803 		mov	r3, #40
  92 0020 FB72     		strb	r3, [r7, #11]
  58:../Main.c     **** 
  59:../Main.c     **** 	initLSM9DS1();
  93              		.loc 1 59 0
  94 0022 FFF7FEFF 		bl	initLSM9DS1
  60:../Main.c     **** 	calibrate(TRUE);
  95              		.loc 1 60 0
  96 0026 4FF00100 		mov	r0, #1
  97 002a FFF7FEFF 		bl	calibrate
  61:../Main.c     **** 
  62:../Main.c     **** 	//readAccel1();
  63:../Main.c     **** 	//makeTimer(100, SYSTM001_PERIODIC, timerHandlerReadByte1, &a, &Status, &TimerId);
  64:../Main.c     **** 	TimerId=SYSTM001_CreateTimer(5,SYSTM001_PERIODIC,timerHandlerReadByte1,&a);
  98              		.loc 1 64 0
  99 002e 07F10403 		add	r3, r7, #4
 100 0032 4FF00500 		mov	r0, #5
 101 0036 4FF00101 		mov	r1, #1
 102 003a 40F20002 		movw	r2, #:lower16:timerHandlerReadByte1
 103 003e C0F20002 		movt	r2, #:upper16:timerHandlerReadByte1
 104 0042 FFF7FEFF 		bl	SYSTM001_CreateTimer
 105 0046 B861     		str	r0, [r7, #24]
  65:../Main.c     **** 	SYSTM001_StartTimer(TimerId);
 106              		.loc 1 65 0
 107 0048 B869     		ldr	r0, [r7, #24]
 108 004a FFF7FEFF 		bl	SYSTM001_StartTimer
 109 004e 00E0     		b	.L5
 110              	.L6:
  66:../Main.c     **** 	while(1)
  67:../Main.c     **** 	{
  68:../Main.c     **** 		/*if(counter < 20)
  69:../Main.c     **** 		{
  70:../Main.c     **** 			readAccel1();
  71:../Main.c     **** 
  72:../Main.c     **** 			ax = calcAccel(ax);
  73:../Main.c     **** 			ay = calcAccel(ay);
  74:../Main.c     **** 			az = calcAccel(az);
  75:../Main.c     **** 
  76:../Main.c     **** 			pomiary[counter].ax = ax;
  77:../Main.c     **** 			pomiary[counter].ay = ay;
  78:../Main.c     **** 			pomiary[counter].az = az;
  79:../Main.c     **** 			counter++;
  80:../Main.c     **** 
  81:../Main.c     **** 			if(USIC1_CH1->PSR_IICMode & (USIC_CH_PSR_IICMode_ERR_Msk | USIC_CH_PSR_IICMode_NACK_Msk))
  82:../Main.c     **** 			{
  83:../Main.c     **** 				// Clear error bits
  84:../Main.c     **** 				USIC1_CH1->PSCR |= 0x3FF;
  85:../Main.c     **** 				// Flush transmit FIFO buffer
  86:../Main.c     **** 				USIC1_CH1->TRBSCR |= USIC_CH_TRBSCR_FLUSHTB_Msk;
  87:../Main.c     **** 				// Modify Transmit Data Valid
  88:../Main.c     **** 				WR_REG(USIC1_CH1->FMR, USIC_CH_FMR_MTDV_Msk, USIC_CH_FMR_MTDV_Pos, 2);
  89:../Main.c     **** 			}
  90:../Main.c     **** 		}
  91:../Main.c     **** 		else
  92:../Main.c     **** 		{
  93:../Main.c     **** 			int d = 0;
  94:../Main.c     **** 			counter = 0;
  95:../Main.c     **** 
  96:../Main.c     **** 			if(USIC1_CH1->PSR_IICMode & (USIC_CH_PSR_IICMode_ERR_Msk | USIC_CH_PSR_IICMode_NACK_Msk))
  97:../Main.c     **** 			{
  98:../Main.c     **** 				// Clear error bits
  99:../Main.c     **** 				USIC1_CH1->PSCR |= 0x3FF;
 100:../Main.c     **** 				// Flush transmit FIFO buffer
 101:../Main.c     **** 				USIC1_CH1->TRBSCR |= USIC_CH_TRBSCR_FLUSHTB_Msk;
 102:../Main.c     **** 				// Modify Transmit Data Valid
 103:../Main.c     **** 				WR_REG(USIC1_CH1->FMR, USIC_CH_FMR_MTDV_Msk, USIC_CH_FMR_MTDV_Pos, 2);
 104:../Main.c     **** 			}
 105:../Main.c     **** 		}*/
 106:../Main.c     **** 
 107:../Main.c     **** 		if(!readingAllowed)
 108:../Main.c     **** 		{
 109:../Main.c     **** 
 110:../Main.c     **** 
 111:../Main.c     **** 			int16_t accelX = (a.dane[1] << 8) | a.dane[0]; // Store x-axis values into gx
 112:../Main.c     **** 
 113:../Main.c     **** 			int16_t accelY = (a.dane[3] << 8) | a.dane[2]; // Store y-axis values into gy
 114:../Main.c     **** 
 115:../Main.c     **** 			int16_t accelZ = (a.dane[5] << 8) | a.dane[4]; // Store z-axis values into gz
 116:../Main.c     **** 
 117:../Main.c     **** 			uint8_t a0 = a.dane[0];
 118:../Main.c     **** 			uint8_t a1 = a.dane[1];
 119:../Main.c     **** 			uint8_t a2 = a.dane[2];
 120:../Main.c     **** 			uint8_t a3 = a.dane[3];
 121:../Main.c     **** 			uint8_t a4 = a.dane[4];
 122:../Main.c     **** 			uint8_t a5 = a.dane[5];
 123:../Main.c     **** 
 124:../Main.c     **** 			if (_autoCalc) //kalibracja
 125:../Main.c     **** 			{
 126:../Main.c     **** 				accelX -= aBiasRaw[X_AXIS];
 127:../Main.c     **** 				accelX -= aBiasRaw[Y_AXIS];
 128:../Main.c     **** 				accelX -= aBiasRaw[Z_AXIS];
 129:../Main.c     **** 			}
 130:../Main.c     **** 
 131:../Main.c     **** 			accelX = calcAccel(accelX);
 132:../Main.c     **** 			accelY = calcAccel(accelY);
 133:../Main.c     **** 			accelZ = calcAccel(accelZ);
 134:../Main.c     **** 
 135:../Main.c     **** 			pomiary[counter].ax = accelX;
 136:../Main.c     **** 			pomiary[counter].ay = accelY;
 137:../Main.c     **** 			pomiary[counter].az = accelZ;
 138:../Main.c     **** 			counter++;
 139:../Main.c     **** 			readingAllowed = TRUE;
 140:../Main.c     **** 		}
 141:../Main.c     **** 
 142:../Main.c     **** 		if(counter > 20)
 143:../Main.c     **** 		{
 144:../Main.c     **** 			counter = 0;
 145:../Main.c     **** 		}
 146:../Main.c     **** 
 147:../Main.c     **** 	}
 111              		.loc 1 147 0
 112 0050 00BF     		nop
 113              	.L5:
 107:../Main.c     **** 		if(!readingAllowed)
 114              		.loc 1 107 0
 115 0052 40F20003 		movw	r3, #:lower16:readingAllowed
 116 0056 C0F20003 		movt	r3, #:upper16:readingAllowed
 117 005a 1B78     		ldrb	r3, [r3, #0]
 118 005c DBB2     		uxtb	r3, r3
 119 005e 002B     		cmp	r3, #0
 120 0060 40F09F80 		bne	.L2
 121              	.LBB2:
 111:../Main.c     **** 			int16_t accelX = (a.dane[1] << 8) | a.dane[0]; // Store x-axis values into gx
 122              		.loc 1 111 0
 123 0064 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 124 0066 4FEA0323 		lsl	r3, r3, #8
 125 006a 9AB2     		uxth	r2, r3
 126 006c 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 127 006e 1343     		orrs	r3, r3, r2
 128 0070 7B84     		strh	r3, [r7, #34]	@ movhi
 113:../Main.c     **** 			int16_t accelY = (a.dane[3] << 8) | a.dane[2]; // Store y-axis values into gy
 129              		.loc 1 113 0
 130 0072 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 131 0074 4FEA0323 		lsl	r3, r3, #8
 132 0078 9AB2     		uxth	r2, r3
 133 007a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 134 007c 1343     		orrs	r3, r3, r2
 135 007e FB82     		strh	r3, [r7, #22]	@ movhi
 115:../Main.c     **** 			int16_t accelZ = (a.dane[5] << 8) | a.dane[4]; // Store z-axis values into gz
 136              		.loc 1 115 0
 137 0080 7B7A     		ldrb	r3, [r7, #9]	@ zero_extendqisi2
 138 0082 4FEA0323 		lsl	r3, r3, #8
 139 0086 9AB2     		uxth	r2, r3
 140 0088 3B7A     		ldrb	r3, [r7, #8]	@ zero_extendqisi2
 141 008a 1343     		orrs	r3, r3, r2
 142 008c BB82     		strh	r3, [r7, #20]	@ movhi
 117:../Main.c     **** 			uint8_t a0 = a.dane[0];
 143              		.loc 1 117 0
 144 008e 3B79     		ldrb	r3, [r7, #4]
 145 0090 FB74     		strb	r3, [r7, #19]
 118:../Main.c     **** 			uint8_t a1 = a.dane[1];
 146              		.loc 1 118 0
 147 0092 7B79     		ldrb	r3, [r7, #5]
 148 0094 BB74     		strb	r3, [r7, #18]
 119:../Main.c     **** 			uint8_t a2 = a.dane[2];
 149              		.loc 1 119 0
 150 0096 BB79     		ldrb	r3, [r7, #6]
 151 0098 7B74     		strb	r3, [r7, #17]
 120:../Main.c     **** 			uint8_t a3 = a.dane[3];
 152              		.loc 1 120 0
 153 009a FB79     		ldrb	r3, [r7, #7]
 154 009c 3B74     		strb	r3, [r7, #16]
 121:../Main.c     **** 			uint8_t a4 = a.dane[4];
 155              		.loc 1 121 0
 156 009e 3B7A     		ldrb	r3, [r7, #8]
 157 00a0 FB73     		strb	r3, [r7, #15]
 122:../Main.c     **** 			uint8_t a5 = a.dane[5];
 158              		.loc 1 122 0
 159 00a2 7B7A     		ldrb	r3, [r7, #9]
 160 00a4 BB73     		strb	r3, [r7, #14]
 124:../Main.c     **** 			if (_autoCalc) //kalibracja
 161              		.loc 1 124 0
 162 00a6 40F20003 		movw	r3, #:lower16:_autoCalc
 163 00aa C0F20003 		movt	r3, #:upper16:_autoCalc
 164 00ae 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 165 00b0 002B     		cmp	r3, #0
 166 00b2 1DD0     		beq	.L3
 126:../Main.c     **** 				accelX -= aBiasRaw[X_AXIS];
 167              		.loc 1 126 0
 168 00b4 7A8C     		ldrh	r2, [r7, #34]
 169 00b6 40F20003 		movw	r3, #:lower16:aBiasRaw
 170 00ba C0F20003 		movt	r3, #:upper16:aBiasRaw
 171 00be 1B88     		ldrh	r3, [r3, #0]
 172 00c0 9BB2     		uxth	r3, r3
 173 00c2 D31A     		subs	r3, r2, r3
 174 00c4 9BB2     		uxth	r3, r3
 175 00c6 7B84     		strh	r3, [r7, #34]	@ movhi
 127:../Main.c     **** 				accelX -= aBiasRaw[Y_AXIS];
 176              		.loc 1 127 0
 177 00c8 7A8C     		ldrh	r2, [r7, #34]
 178 00ca 40F20003 		movw	r3, #:lower16:aBiasRaw
 179 00ce C0F20003 		movt	r3, #:upper16:aBiasRaw
 180 00d2 5B88     		ldrh	r3, [r3, #2]
 181 00d4 9BB2     		uxth	r3, r3
 182 00d6 D31A     		subs	r3, r2, r3
 183 00d8 9BB2     		uxth	r3, r3
 184 00da 7B84     		strh	r3, [r7, #34]	@ movhi
 128:../Main.c     **** 				accelX -= aBiasRaw[Z_AXIS];
 185              		.loc 1 128 0
 186 00dc 7A8C     		ldrh	r2, [r7, #34]
 187 00de 40F20003 		movw	r3, #:lower16:aBiasRaw
 188 00e2 C0F20003 		movt	r3, #:upper16:aBiasRaw
 189 00e6 9B88     		ldrh	r3, [r3, #4]
 190 00e8 9BB2     		uxth	r3, r3
 191 00ea D31A     		subs	r3, r2, r3
 192 00ec 9BB2     		uxth	r3, r3
 193 00ee 7B84     		strh	r3, [r7, #34]	@ movhi
 194              	.L3:
 131:../Main.c     **** 			accelX = calcAccel(accelX);
 195              		.loc 1 131 0
 196 00f0 B7F92230 		ldrsh	r3, [r7, #34]
 197 00f4 1846     		mov	r0, r3
 198 00f6 FFF7FEFF 		bl	calcAccel
 199 00fa 07EE900A 		fmsr	s15, r0
 200 00fe FDEEE77A 		ftosizs	s15, s15
 201 0102 17EE903A 		fmrs	r3, s15	@ int
 202 0106 7B84     		strh	r3, [r7, #34]	@ movhi
 132:../Main.c     **** 			accelY = calcAccel(accelY);
 203              		.loc 1 132 0
 204 0108 B7F91630 		ldrsh	r3, [r7, #22]
 205 010c 1846     		mov	r0, r3
 206 010e FFF7FEFF 		bl	calcAccel
 207 0112 07EE900A 		fmsr	s15, r0
 208 0116 FDEEE77A 		ftosizs	s15, s15
 209 011a 17EE903A 		fmrs	r3, s15	@ int
 210 011e FB82     		strh	r3, [r7, #22]	@ movhi
 133:../Main.c     **** 			accelZ = calcAccel(accelZ);
 211              		.loc 1 133 0
 212 0120 B7F91430 		ldrsh	r3, [r7, #20]
 213 0124 1846     		mov	r0, r3
 214 0126 FFF7FEFF 		bl	calcAccel
 215 012a 07EE900A 		fmsr	s15, r0
 216 012e FDEEE77A 		ftosizs	s15, s15
 217 0132 17EE903A 		fmrs	r3, s15	@ int
 218 0136 BB82     		strh	r3, [r7, #20]	@ movhi
 135:../Main.c     **** 			pomiary[counter].ax = accelX;
 219              		.loc 1 135 0
 220 0138 40F20002 		movw	r2, #:lower16:pomiary
 221 013c C0F20002 		movt	r2, #:upper16:pomiary
 222 0140 796A     		ldr	r1, [r7, #36]
 223 0142 0B46     		mov	r3, r1
 224 0144 4FEA4303 		lsl	r3, r3, #1
 225 0148 5B18     		adds	r3, r3, r1
 226 014a 4FEA4303 		lsl	r3, r3, #1
 227 014e D318     		adds	r3, r2, r3
 228 0150 7A8C     		ldrh	r2, [r7, #34]	@ movhi
 229 0152 1A80     		strh	r2, [r3, #0]	@ movhi
 136:../Main.c     **** 			pomiary[counter].ay = accelY;
 230              		.loc 1 136 0
 231 0154 40F20002 		movw	r2, #:lower16:pomiary
 232 0158 C0F20002 		movt	r2, #:upper16:pomiary
 233 015c 796A     		ldr	r1, [r7, #36]
 234 015e 0B46     		mov	r3, r1
 235 0160 4FEA4303 		lsl	r3, r3, #1
 236 0164 5B18     		adds	r3, r3, r1
 237 0166 4FEA4303 		lsl	r3, r3, #1
 238 016a D318     		adds	r3, r2, r3
 239 016c FA8A     		ldrh	r2, [r7, #22]	@ movhi
 240 016e 5A80     		strh	r2, [r3, #2]	@ movhi
 137:../Main.c     **** 			pomiary[counter].az = accelZ;
 241              		.loc 1 137 0
 242 0170 40F20002 		movw	r2, #:lower16:pomiary
 243 0174 C0F20002 		movt	r2, #:upper16:pomiary
 244 0178 796A     		ldr	r1, [r7, #36]
 245 017a 0B46     		mov	r3, r1
 246 017c 4FEA4303 		lsl	r3, r3, #1
 247 0180 5B18     		adds	r3, r3, r1
 248 0182 4FEA4303 		lsl	r3, r3, #1
 249 0186 D318     		adds	r3, r2, r3
 250 0188 BA8A     		ldrh	r2, [r7, #20]	@ movhi
 251 018a 9A80     		strh	r2, [r3, #4]	@ movhi
 138:../Main.c     **** 			counter++;
 252              		.loc 1 138 0
 253 018c 7B6A     		ldr	r3, [r7, #36]
 254 018e 03F10103 		add	r3, r3, #1
 255 0192 7B62     		str	r3, [r7, #36]
 139:../Main.c     **** 			readingAllowed = TRUE;
 256              		.loc 1 139 0
 257 0194 40F20003 		movw	r3, #:lower16:readingAllowed
 258 0198 C0F20003 		movt	r3, #:upper16:readingAllowed
 259 019c 4FF00102 		mov	r2, #1
 260 01a0 1A70     		strb	r2, [r3, #0]
 261              	.L2:
 262              	.LBE2:
 142:../Main.c     **** 		if(counter > 20)
 263              		.loc 1 142 0
 264 01a2 7B6A     		ldr	r3, [r7, #36]
 265 01a4 142B     		cmp	r3, #20
 266 01a6 7FF753AF 		ble	.L6
 144:../Main.c     **** 			counter = 0;
 267              		.loc 1 144 0
 268 01aa 4FF00003 		mov	r3, #0
 269 01ae 7B62     		str	r3, [r7, #36]
 270              		.loc 1 147 0
 271 01b0 4EE7     		b	.L6
 272              		.cfi_endproc
 273              	.LFE117:
 275 01b2 00BF     		.section	.text.initLSM9DS1,"ax",%progbits
 276              		.align	2
 277              		.global	initLSM9DS1
 278              		.thumb
 279              		.thumb_func
 281              	initLSM9DS1:
 282              	.LFB118:
 148:../Main.c     **** 	return 0;
 149:../Main.c     **** }
 150:../Main.c     **** 
 151:../Main.c     **** void initLSM9DS1(void)
 152:../Main.c     **** {
 283              		.loc 1 152 0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 8
 286              		@ frame_needed = 1, uses_anonymous_args = 0
 287 0000 80B5     		push	{r7, lr}
 288              	.LCFI3:
 289              		.cfi_def_cfa_offset 8
 290              		.cfi_offset 7, -8
 291              		.cfi_offset 14, -4
 292 0002 82B0     		sub	sp, sp, #8
 293              	.LCFI4:
 294              		.cfi_def_cfa_offset 16
 295 0004 00AF     		add	r7, sp, #0
 296              	.LCFI5:
 297              		.cfi_def_cfa_register 7
 153:../Main.c     **** 	init(IMU_MODE_I2C, LSM9DS1_AG_ADDR(1), LSM9DS1_M_ADDR(1));
 298              		.loc 1 153 0
 299 0006 4FF00100 		mov	r0, #1
 300 000a 4FF06B01 		mov	r1, #107
 301 000e 4FF01E02 		mov	r2, #30
 302 0012 FFF7FEFF 		bl	init
 154:../Main.c     **** 
 155:../Main.c     **** 	settings.device.commInterface = IMU_MODE_I2C;
 303              		.loc 1 155 0
 304 0016 40F20003 		movw	r3, #:lower16:settings
 305 001a C0F20003 		movt	r3, #:upper16:settings
 306 001e 4FF00102 		mov	r2, #1
 307 0022 1A70     		strb	r2, [r3, #0]
 156:../Main.c     **** 	settings.device.mAddress = LSM9DS1_M;
 308              		.loc 1 156 0
 309 0024 40F20003 		movw	r3, #:lower16:settings
 310 0028 C0F20003 		movt	r3, #:upper16:settings
 311 002c 4FF01E02 		mov	r2, #30
 312 0030 9A70     		strb	r2, [r3, #2]
 157:../Main.c     **** 	settings.device.agAddress = LSM9DS1_AG;
 313              		.loc 1 157 0
 314 0032 40F20003 		movw	r3, #:lower16:settings
 315 0036 C0F20003 		movt	r3, #:upper16:settings
 316 003a 4FF06B02 		mov	r2, #107
 317 003e 5A70     		strb	r2, [r3, #1]
 158:../Main.c     **** 
 159:../Main.c     **** 	if(!begin())
 318              		.loc 1 159 0
 319 0040 FFF7FEFF 		bl	begin
 320 0044 0346     		mov	r3, r0
 321 0046 002B     		cmp	r3, #0
 322 0048 02D1     		bne	.L7
 323              	.LBB3:
 160:../Main.c     **** 	{
 161:../Main.c     **** 		int k = 0;
 324              		.loc 1 161 0
 325 004a 4FF00003 		mov	r3, #0
 326 004e 7B60     		str	r3, [r7, #4]
 327              	.L7:
 328              	.LBE3:
 162:../Main.c     **** 	}
 163:../Main.c     **** }
 329              		.loc 1 163 0
 330 0050 07F10807 		add	r7, r7, #8
 331 0054 BD46     		mov	sp, r7
 332 0056 80BD     		pop	{r7, pc}
 333              		.cfi_endproc
 334              	.LFE118:
 336              		.section	.text.timerHandlerReadByte1,"ax",%progbits
 337              		.align	2
 338              		.global	timerHandlerReadByte1
 339              		.thumb
 340              		.thumb_func
 342              	timerHandlerReadByte1:
 343              	.LFB119:
 164:../Main.c     **** 
 165:../Main.c     **** void timerHandlerReadByte1(void *T)
 166:../Main.c     **** {
 344              		.loc 1 166 0
 345              		.cfi_startproc
 346              		@ args = 0, pretend = 0, frame = 48
 347              		@ frame_needed = 1, uses_anonymous_args = 0
 348 0000 80B5     		push	{r7, lr}
 349              	.LCFI6:
 350              		.cfi_def_cfa_offset 8
 351              		.cfi_offset 7, -8
 352              		.cfi_offset 14, -4
 353 0002 8CB0     		sub	sp, sp, #48
 354              	.LCFI7:
 355              		.cfi_def_cfa_offset 56
 356 0004 00AF     		add	r7, sp, #0
 357              	.LCFI8:
 358              		.cfi_def_cfa_register 7
 359 0006 7860     		str	r0, [r7, #4]
 167:../Main.c     **** 	static volatile uint32_t stageOfReading = 0;
 168:../Main.c     **** 	static uint8_t whichByte = 0;
 169:../Main.c     **** 	addressAndData *address = (addressAndData*)T;
 360              		.loc 1 169 0
 361 0008 7B68     		ldr	r3, [r7, #4]
 362 000a FB62     		str	r3, [r7, #44]
 170:../Main.c     **** 
 171:../Main.c     **** 	if(readingAllowed == TRUE)
 363              		.loc 1 171 0
 364 000c 40F20003 		movw	r3, #:lower16:readingAllowed
 365 0010 C0F20003 		movt	r3, #:upper16:readingAllowed
 366 0014 1B78     		ldrb	r3, [r3, #0]
 367 0016 DBB2     		uxtb	r3, r3
 368 0018 012B     		cmp	r3, #1
 369 001a 40F08381 		bne	.L9
 370              	.LBB4:
 172:../Main.c     **** 	{
 173:../Main.c     **** 		if(USIC1_CH1->PSR_IICMode & (USIC_CH_PSR_IICMode_ERR_Msk | USIC_CH_PSR_IICMode_NACK_Msk))
 371              		.loc 1 173 0
 372 001e 4FF40073 		mov	r3, #512
 373 0022 C4F60203 		movt	r3, 18434
 374 0026 9B6C     		ldr	r3, [r3, #72]
 375 0028 03F49073 		and	r3, r3, #288
 376 002c 002B     		cmp	r3, #0
 377 002e 29D0     		beq	.L11
 174:../Main.c     **** 		{
 175:../Main.c     **** 			// Clear error bits
 176:../Main.c     **** 			USIC1_CH1->PSCR |= 0x3FF;
 378              		.loc 1 176 0
 379 0030 4FF40073 		mov	r3, #512
 380 0034 C4F60203 		movt	r3, 18434
 381 0038 4FF40072 		mov	r2, #512
 382 003c C4F60202 		movt	r2, 18434
 383 0040 D26C     		ldr	r2, [r2, #76]
 384 0042 6FEA9222 		mvn	r2, r2, lsr #10
 385 0046 6FEA8222 		mvn	r2, r2, lsl #10
 386 004a DA64     		str	r2, [r3, #76]
 177:../Main.c     **** 			// Flush transmit FIFO buffer
 178:../Main.c     **** 			USIC1_CH1->TRBSCR |= USIC_CH_TRBSCR_FLUSHTB_Msk;
 387              		.loc 1 178 0
 388 004c 4FF40073 		mov	r3, #512
 389 0050 C4F60203 		movt	r3, 18434
 390 0054 4FF40072 		mov	r2, #512
 391 0058 C4F60202 		movt	r2, 18434
 392 005c D2F81821 		ldr	r2, [r2, #280]
 393 0060 42F40042 		orr	r2, r2, #32768
 394 0064 C3F81821 		str	r2, [r3, #280]
 179:../Main.c     **** 			// Modify Transmit Data Valid
 180:../Main.c     **** 			WR_REG(USIC1_CH1->FMR, USIC_CH_FMR_MTDV_Msk, USIC_CH_FMR_MTDV_Pos, 2);
 395              		.loc 1 180 0
 396 0068 4FF40073 		mov	r3, #512
 397 006c C4F60203 		movt	r3, 18434
 398 0070 4FF40072 		mov	r2, #512
 399 0074 C4F60202 		movt	r2, 18434
 400 0078 926E     		ldr	r2, [r2, #104]
 401 007a 22F00302 		bic	r2, r2, #3
 402 007e 42F00202 		orr	r2, r2, #2
 403 0082 9A66     		str	r2, [r3, #104]
 404              	.L11:
 181:../Main.c     **** 		}
 182:../Main.c     **** 
 183:../Main.c     **** 		USIC_CH_TypeDef* I2CRegs = I2C001_Handle0.I2CRegs;
 405              		.loc 1 183 0
 406 0084 40F20003 		movw	r3, #:lower16:I2C001_Handle0
 407 0088 C0F20003 		movt	r3, #:upper16:I2C001_Handle0
 408 008c 5B68     		ldr	r3, [r3, #4]
 409 008e BB62     		str	r3, [r7, #40]
 184:../Main.c     **** 
 185:../Main.c     **** 		I2C001_DataType data1;
 186:../Main.c     **** 		data1.Data1.TDF_Type = I2C_TDF_MStart;
 410              		.loc 1 186 0
 411 0090 4FF00403 		mov	r3, #4
 412 0094 7B77     		strb	r3, [r7, #29]
 187:../Main.c     **** 		uint8_t adr = address->adr.addressDevice;
 413              		.loc 1 187 0
 414 0096 FB6A     		ldr	r3, [r7, #44]
 415 0098 9B79     		ldrb	r3, [r3, #6]
 416 009a 87F82730 		strb	r3, [r7, #39]
 188:../Main.c     **** 		data1.Data1.Data = ((adr << 1) | I2C_WRITE);
 417              		.loc 1 188 0
 418 009e 97F82730 		ldrb	r3, [r7, #39]
 419 00a2 4FEA4303 		lsl	r3, r3, #1
 420 00a6 DBB2     		uxtb	r3, r3
 421 00a8 3B77     		strb	r3, [r7, #28]
 189:../Main.c     **** 		while(!I2C001_WriteData(&I2C001_Handle0,&data1))
 422              		.loc 1 189 0
 423 00aa 07E0     		b	.L12
 424              	.L13:
 190:../Main.c     **** 		{
 191:../Main.c     **** 			USIC_FlushTxFIFO(I2CRegs);
 425              		.loc 1 191 0
 426 00ac BB6A     		ldr	r3, [r7, #40]
 427 00ae D3F81831 		ldr	r3, [r3, #280]
 428 00b2 43F40042 		orr	r2, r3, #32768
 429 00b6 BB6A     		ldr	r3, [r7, #40]
 430 00b8 C3F81821 		str	r2, [r3, #280]
 431              	.L12:
 189:../Main.c     **** 		while(!I2C001_WriteData(&I2C001_Handle0,&data1))
 432              		.loc 1 189 0 discriminator 1
 433 00bc 07F11C03 		add	r3, r7, #28
 434 00c0 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 435 00c4 C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 436 00c8 1946     		mov	r1, r3
 437 00ca FFF7FEFF 		bl	I2C001_WriteData
 438 00ce 0346     		mov	r3, r0
 439 00d0 002B     		cmp	r3, #0
 440 00d2 EBD0     		beq	.L13
 192:../Main.c     **** 		}
 193:../Main.c     **** 
 194:../Main.c     **** 		stageOfReading++;
 441              		.loc 1 194 0
 442 00d4 40F20003 		movw	r3, #:lower16:stageOfReading.8208
 443 00d8 C0F20003 		movt	r3, #:upper16:stageOfReading.8208
 444 00dc 1B68     		ldr	r3, [r3, #0]
 445 00de 03F10102 		add	r2, r3, #1
 446 00e2 40F20003 		movw	r3, #:lower16:stageOfReading.8208
 447 00e6 C0F20003 		movt	r3, #:upper16:stageOfReading.8208
 448 00ea 1A60     		str	r2, [r3, #0]
 195:../Main.c     **** 		delay(DELAY);
 449              		.loc 1 195 0
 450 00ec 42F21070 		movw	r0, #10000
 451 00f0 FFF7FEFF 		bl	delay
 196:../Main.c     **** 
 197:../Main.c     **** 		I2C001_DataType data2;
 198:../Main.c     **** 		data2.Data1.TDF_Type = I2C_TDF_MTxData;
 452              		.loc 1 198 0
 453 00f4 4FF00003 		mov	r3, #0
 454 00f8 7B76     		strb	r3, [r7, #25]
 199:../Main.c     **** 		uint8_t subAdr = (address->adr.subAddress + whichByte);
 455              		.loc 1 199 0
 456 00fa FB6A     		ldr	r3, [r7, #44]
 457 00fc DA79     		ldrb	r2, [r3, #7]	@ zero_extendqisi2
 458 00fe 40F20003 		movw	r3, #:lower16:whichByte.8209
 459 0102 C0F20003 		movt	r3, #:upper16:whichByte.8209
 460 0106 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 461 0108 D318     		adds	r3, r2, r3
 462 010a 87F82630 		strb	r3, [r7, #38]
 200:../Main.c     **** 		data2.Data1.Data = subAdr;
 463              		.loc 1 200 0
 464 010e 97F82630 		ldrb	r3, [r7, #38]
 465 0112 3B76     		strb	r3, [r7, #24]
 201:../Main.c     **** 		while(!I2C001_WriteData(&I2C001_Handle0,&data2))
 466              		.loc 1 201 0
 467 0114 07E0     		b	.L14
 468              	.L15:
 202:../Main.c     **** 		{
 203:../Main.c     **** 			USIC_FlushTxFIFO(I2CRegs);
 469              		.loc 1 203 0
 470 0116 BB6A     		ldr	r3, [r7, #40]
 471 0118 D3F81831 		ldr	r3, [r3, #280]
 472 011c 43F40042 		orr	r2, r3, #32768
 473 0120 BB6A     		ldr	r3, [r7, #40]
 474 0122 C3F81821 		str	r2, [r3, #280]
 475              	.L14:
 201:../Main.c     **** 		while(!I2C001_WriteData(&I2C001_Handle0,&data2))
 476              		.loc 1 201 0 discriminator 1
 477 0126 07F11803 		add	r3, r7, #24
 478 012a 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 479 012e C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 480 0132 1946     		mov	r1, r3
 481 0134 FFF7FEFF 		bl	I2C001_WriteData
 482 0138 0346     		mov	r3, r0
 483 013a 002B     		cmp	r3, #0
 484 013c EBD0     		beq	.L15
 204:../Main.c     **** 		}
 205:../Main.c     **** 
 206:../Main.c     **** 		stageOfReading++;
 485              		.loc 1 206 0
 486 013e 40F20003 		movw	r3, #:lower16:stageOfReading.8208
 487 0142 C0F20003 		movt	r3, #:upper16:stageOfReading.8208
 488 0146 1B68     		ldr	r3, [r3, #0]
 489 0148 03F10102 		add	r2, r3, #1
 490 014c 40F20003 		movw	r3, #:lower16:stageOfReading.8208
 491 0150 C0F20003 		movt	r3, #:upper16:stageOfReading.8208
 492 0154 1A60     		str	r2, [r3, #0]
 207:../Main.c     **** 		delay(DELAY);
 493              		.loc 1 207 0
 494 0156 42F21070 		movw	r0, #10000
 495 015a FFF7FEFF 		bl	delay
 208:../Main.c     **** 
 209:../Main.c     **** 		I2C001_DataType data3;
 210:../Main.c     **** 		data3.Data1.TDF_Type = I2C_TDF_MRStart;
 496              		.loc 1 210 0
 497 015e 4FF00503 		mov	r3, #5
 498 0162 7B75     		strb	r3, [r7, #21]
 211:../Main.c     **** 		uint8_t adr1 = address->adr.addressDevice;
 499              		.loc 1 211 0
 500 0164 FB6A     		ldr	r3, [r7, #44]
 501 0166 9B79     		ldrb	r3, [r3, #6]
 502 0168 87F82530 		strb	r3, [r7, #37]
 212:../Main.c     **** 		data3.Data1.Data = ((adr1 << 1) | I2C_READ);
 503              		.loc 1 212 0
 504 016c 97F82530 		ldrb	r3, [r7, #37]
 505 0170 4FEA4303 		lsl	r3, r3, #1
 506 0174 DBB2     		uxtb	r3, r3
 507 0176 43F00103 		orr	r3, r3, #1
 508 017a DBB2     		uxtb	r3, r3
 509 017c 3B75     		strb	r3, [r7, #20]
 213:../Main.c     **** 		while(!I2C001_WriteData(&I2C001_Handle0,&data3))
 510              		.loc 1 213 0
 511 017e 07E0     		b	.L16
 512              	.L17:
 214:../Main.c     **** 		{
 215:../Main.c     **** 			USIC_FlushTxFIFO(I2CRegs);
 513              		.loc 1 215 0
 514 0180 BB6A     		ldr	r3, [r7, #40]
 515 0182 D3F81831 		ldr	r3, [r3, #280]
 516 0186 43F40042 		orr	r2, r3, #32768
 517 018a BB6A     		ldr	r3, [r7, #40]
 518 018c C3F81821 		str	r2, [r3, #280]
 519              	.L16:
 213:../Main.c     **** 		while(!I2C001_WriteData(&I2C001_Handle0,&data3))
 520              		.loc 1 213 0 discriminator 1
 521 0190 07F11403 		add	r3, r7, #20
 522 0194 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 523 0198 C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 524 019c 1946     		mov	r1, r3
 525 019e FFF7FEFF 		bl	I2C001_WriteData
 526 01a2 0346     		mov	r3, r0
 527 01a4 002B     		cmp	r3, #0
 528 01a6 EBD0     		beq	.L17
 216:../Main.c     **** 		}
 217:../Main.c     **** 
 218:../Main.c     **** 		stageOfReading++;
 529              		.loc 1 218 0
 530 01a8 40F20003 		movw	r3, #:lower16:stageOfReading.8208
 531 01ac C0F20003 		movt	r3, #:upper16:stageOfReading.8208
 532 01b0 1B68     		ldr	r3, [r3, #0]
 533 01b2 03F10102 		add	r2, r3, #1
 534 01b6 40F20003 		movw	r3, #:lower16:stageOfReading.8208
 535 01ba C0F20003 		movt	r3, #:upper16:stageOfReading.8208
 536 01be 1A60     		str	r2, [r3, #0]
 219:../Main.c     **** 		delay(DELAY);
 537              		.loc 1 219 0
 538 01c0 42F21070 		movw	r0, #10000
 539 01c4 FFF7FEFF 		bl	delay
 220:../Main.c     **** 
 221:../Main.c     **** 		I2C001_DataType data4;
 222:../Main.c     **** 		data4.Data1.TDF_Type = I2C_TDF_MRxAck1;
 540              		.loc 1 222 0
 541 01c8 4FF00303 		mov	r3, #3
 542 01cc 7B74     		strb	r3, [r7, #17]
 223:../Main.c     **** 		data4.Data1.Data = ubyteFF;
 543              		.loc 1 223 0
 544 01ce 4FF0FF03 		mov	r3, #255
 545 01d2 3B74     		strb	r3, [r7, #16]
 224:../Main.c     **** 		while(!I2C001_WriteData(&I2C001_Handle0,&data4))
 546              		.loc 1 224 0
 547 01d4 07E0     		b	.L18
 548              	.L19:
 225:../Main.c     **** 		{
 226:../Main.c     **** 			USIC_FlushTxFIFO(I2CRegs);
 549              		.loc 1 226 0
 550 01d6 BB6A     		ldr	r3, [r7, #40]
 551 01d8 D3F81831 		ldr	r3, [r3, #280]
 552 01dc 43F40042 		orr	r2, r3, #32768
 553 01e0 BB6A     		ldr	r3, [r7, #40]
 554 01e2 C3F81821 		str	r2, [r3, #280]
 555              	.L18:
 224:../Main.c     **** 		while(!I2C001_WriteData(&I2C001_Handle0,&data4))
 556              		.loc 1 224 0 discriminator 1
 557 01e6 07F11003 		add	r3, r7, #16
 558 01ea 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 559 01ee C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 560 01f2 1946     		mov	r1, r3
 561 01f4 FFF7FEFF 		bl	I2C001_WriteData
 562 01f8 0346     		mov	r3, r0
 563 01fa 002B     		cmp	r3, #0
 564 01fc EBD0     		beq	.L19
 227:../Main.c     **** 		}
 228:../Main.c     **** 
 229:../Main.c     **** 		stageOfReading++;
 565              		.loc 1 229 0
 566 01fe 40F20003 		movw	r3, #:lower16:stageOfReading.8208
 567 0202 C0F20003 		movt	r3, #:upper16:stageOfReading.8208
 568 0206 1B68     		ldr	r3, [r3, #0]
 569 0208 03F10102 		add	r2, r3, #1
 570 020c 40F20003 		movw	r3, #:lower16:stageOfReading.8208
 571 0210 C0F20003 		movt	r3, #:upper16:stageOfReading.8208
 572 0214 1A60     		str	r2, [r3, #0]
 230:../Main.c     **** 		delay(DELAY);
 573              		.loc 1 230 0
 574 0216 42F21070 		movw	r0, #10000
 575 021a FFF7FEFF 		bl	delay
 231:../Main.c     **** 
 232:../Main.c     **** 		I2C001_DataType data5;
 233:../Main.c     **** 		data5.Data1.TDF_Type = I2C_TDF_MStop;
 576              		.loc 1 233 0
 577 021e 4FF00603 		mov	r3, #6
 578 0222 7B73     		strb	r3, [r7, #13]
 234:../Main.c     **** 		data5.Data1.Data = ubyteFF;
 579              		.loc 1 234 0
 580 0224 4FF0FF03 		mov	r3, #255
 581 0228 3B73     		strb	r3, [r7, #12]
 235:../Main.c     **** 		while(!I2C001_WriteData(&I2C001_Handle0,&data5))
 582              		.loc 1 235 0
 583 022a 07E0     		b	.L20
 584              	.L21:
 236:../Main.c     **** 		{
 237:../Main.c     **** 			USIC_FlushTxFIFO(I2CRegs);
 585              		.loc 1 237 0
 586 022c BB6A     		ldr	r3, [r7, #40]
 587 022e D3F81831 		ldr	r3, [r3, #280]
 588 0232 43F40042 		orr	r2, r3, #32768
 589 0236 BB6A     		ldr	r3, [r7, #40]
 590 0238 C3F81821 		str	r2, [r3, #280]
 591              	.L20:
 235:../Main.c     **** 		while(!I2C001_WriteData(&I2C001_Handle0,&data5))
 592              		.loc 1 235 0 discriminator 1
 593 023c 07F10C03 		add	r3, r7, #12
 594 0240 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 595 0244 C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 596 0248 1946     		mov	r1, r3
 597 024a FFF7FEFF 		bl	I2C001_WriteData
 598 024e 0346     		mov	r3, r0
 599 0250 002B     		cmp	r3, #0
 600 0252 EBD0     		beq	.L21
 238:../Main.c     **** 		}
 239:../Main.c     **** 
 240:../Main.c     **** 		stageOfReading++;
 601              		.loc 1 240 0
 602 0254 40F20003 		movw	r3, #:lower16:stageOfReading.8208
 603 0258 C0F20003 		movt	r3, #:upper16:stageOfReading.8208
 604 025c 1B68     		ldr	r3, [r3, #0]
 605 025e 03F10102 		add	r2, r3, #1
 606 0262 40F20003 		movw	r3, #:lower16:stageOfReading.8208
 607 0266 C0F20003 		movt	r3, #:upper16:stageOfReading.8208
 608 026a 1A60     		str	r2, [r3, #0]
 241:../Main.c     **** 		delay(DELAY);
 609              		.loc 1 241 0
 610 026c 42F21070 		movw	r0, #10000
 611 0270 FFF7FEFF 		bl	delay
 242:../Main.c     **** 
 243:../Main.c     **** 		int k = 0;
 612              		.loc 1 243 0
 613 0274 4FF00003 		mov	r3, #0
 614 0278 3B62     		str	r3, [r7, #32]
 244:../Main.c     **** 
 245:../Main.c     **** 		uint16_t buffer = 0;
 615              		.loc 1 245 0
 616 027a 4FF00003 		mov	r3, #0
 617 027e 7B81     		strh	r3, [r7, #10]	@ movhi
 246:../Main.c     **** 		if(I2C001_ReadData(&I2C001_Handle0,&buffer))
 618              		.loc 1 246 0
 619 0280 07F10A03 		add	r3, r7, #10
 620 0284 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 621 0288 C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 622 028c 1946     		mov	r1, r3
 623 028e FFF7FEFF 		bl	I2C001_ReadData
 624 0292 0346     		mov	r3, r0
 625 0294 002B     		cmp	r3, #0
 626 0296 04D0     		beq	.L22
 247:../Main.c     **** 		{
 248:../Main.c     **** 			k++;
 627              		.loc 1 248 0
 628 0298 3B6A     		ldr	r3, [r7, #32]
 629 029a 03F10103 		add	r3, r3, #1
 630 029e 3B62     		str	r3, [r7, #32]
 631 02a0 03E0     		b	.L23
 632              	.L22:
 249:../Main.c     **** 		}
 250:../Main.c     **** 		else
 251:../Main.c     **** 		{
 252:../Main.c     **** 			k--;
 633              		.loc 1 252 0
 634 02a2 3B6A     		ldr	r3, [r7, #32]
 635 02a4 03F1FF33 		add	r3, r3, #-1
 636 02a8 3B62     		str	r3, [r7, #32]
 637              	.L23:
 253:../Main.c     **** 		}
 254:../Main.c     **** 		delay(DELAY);
 638              		.loc 1 254 0
 639 02aa 42F21070 		movw	r0, #10000
 640 02ae FFF7FEFF 		bl	delay
 255:../Main.c     **** 		address->dane[whichByte] = (uint8_t)buffer;
 641              		.loc 1 255 0
 642 02b2 40F20003 		movw	r3, #:lower16:whichByte.8209
 643 02b6 C0F20003 		movt	r3, #:upper16:whichByte.8209
 644 02ba 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 645 02bc 7A89     		ldrh	r2, [r7, #10]
 646 02be D1B2     		uxtb	r1, r2
 647 02c0 FA6A     		ldr	r2, [r7, #44]
 648 02c2 D154     		strb	r1, [r2, r3]
 256:../Main.c     **** 		stageOfReading = 0;
 649              		.loc 1 256 0
 650 02c4 40F20003 		movw	r3, #:lower16:stageOfReading.8208
 651 02c8 C0F20003 		movt	r3, #:upper16:stageOfReading.8208
 652 02cc 4FF00002 		mov	r2, #0
 653 02d0 1A60     		str	r2, [r3, #0]
 257:../Main.c     **** 		whichByte++;
 654              		.loc 1 257 0
 655 02d2 40F20003 		movw	r3, #:lower16:whichByte.8209
 656 02d6 C0F20003 		movt	r3, #:upper16:whichByte.8209
 657 02da 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 658 02dc 03F10103 		add	r3, r3, #1
 659 02e0 DAB2     		uxtb	r2, r3
 660 02e2 40F20003 		movw	r3, #:lower16:whichByte.8209
 661 02e6 C0F20003 		movt	r3, #:upper16:whichByte.8209
 662 02ea 1A70     		strb	r2, [r3, #0]
 258:../Main.c     **** 
 259:../Main.c     **** 		if(whichByte == 6)
 663              		.loc 1 259 0
 664 02ec 40F20003 		movw	r3, #:lower16:whichByte.8209
 665 02f0 C0F20003 		movt	r3, #:upper16:whichByte.8209
 666 02f4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 667 02f6 062B     		cmp	r3, #6
 668 02f8 14D1     		bne	.L9
 260:../Main.c     **** 		{
 261:../Main.c     **** 			readingAllowed = FALSE;
 669              		.loc 1 261 0
 670 02fa 40F20003 		movw	r3, #:lower16:readingAllowed
 671 02fe C0F20003 		movt	r3, #:upper16:readingAllowed
 672 0302 4FF00002 		mov	r2, #0
 673 0306 1A70     		strb	r2, [r3, #0]
 262:../Main.c     **** 
 263:../Main.c     **** 			whichByte = 0;
 674              		.loc 1 263 0
 675 0308 40F20003 		movw	r3, #:lower16:whichByte.8209
 676 030c C0F20003 		movt	r3, #:upper16:whichByte.8209
 677 0310 4FF00002 		mov	r2, #0
 678 0314 1A70     		strb	r2, [r3, #0]
 264:../Main.c     **** 			stageOfReading = 0;
 679              		.loc 1 264 0
 680 0316 40F20003 		movw	r3, #:lower16:stageOfReading.8208
 681 031a C0F20003 		movt	r3, #:upper16:stageOfReading.8208
 682 031e 4FF00002 		mov	r2, #0
 683 0322 1A60     		str	r2, [r3, #0]
 684              	.L9:
 685              	.LBE4:
 265:../Main.c     **** 		}
 266:../Main.c     **** 	}
 267:../Main.c     **** }
 686              		.loc 1 267 0
 687 0324 07F13007 		add	r7, r7, #48
 688 0328 BD46     		mov	sp, r7
 689 032a 80BD     		pop	{r7, pc}
 690              		.cfi_endproc
 691              	.LFE119:
 693              		.section	.text.timerHandlerReadByte,"ax",%progbits
 694              		.align	2
 695              		.global	timerHandlerReadByte
 696              		.thumb
 697              		.thumb_func
 699              	timerHandlerReadByte:
 700              	.LFB120:
 268:../Main.c     **** 
 269:../Main.c     **** void timerHandlerReadByte(void *T)
 270:../Main.c     **** {
 701              		.loc 1 270 0
 702              		.cfi_startproc
 703              		@ args = 0, pretend = 0, frame = 40
 704              		@ frame_needed = 1, uses_anonymous_args = 0
 705 0000 80B5     		push	{r7, lr}
 706              	.LCFI9:
 707              		.cfi_def_cfa_offset 8
 708              		.cfi_offset 7, -8
 709              		.cfi_offset 14, -4
 710 0002 8AB0     		sub	sp, sp, #40
 711              	.LCFI10:
 712              		.cfi_def_cfa_offset 48
 713 0004 00AF     		add	r7, sp, #0
 714              	.LCFI11:
 715              		.cfi_def_cfa_register 7
 716 0006 7860     		str	r0, [r7, #4]
 271:../Main.c     **** 	static volatile uint32_t stageOfReading = 0;
 272:../Main.c     **** 	static volatile uint8_t whichByte = 0;
 273:../Main.c     **** 	addressAndData address = *((addressAndData*)T);
 717              		.loc 1 273 0
 718 0008 7A68     		ldr	r2, [r7, #4]
 719 000a 07F12003 		add	r3, r7, #32
 720 000e 1068     		ldr	r0, [r2, #0]	@ unaligned
 721 0010 5168     		ldr	r1, [r2, #4]	@ unaligned
 722 0012 03C3     		stmia	r3!, {r0, r1}
 274:../Main.c     **** 
 275:../Main.c     **** 	if(readingAllowed == TRUE)
 723              		.loc 1 275 0
 724 0014 40F20003 		movw	r3, #:lower16:readingAllowed
 725 0018 C0F20003 		movt	r3, #:upper16:readingAllowed
 726 001c 1B78     		ldrb	r3, [r3, #0]
 727 001e DBB2     		uxtb	r3, r3
 728 0020 012B     		cmp	r3, #1
 729 0022 40F03681 		bne	.L25
 276:../Main.c     **** 	{
 277:../Main.c     **** 		if(0 == stageOfReading)
 730              		.loc 1 277 0
 731 0026 40F20003 		movw	r3, #:lower16:stageOfReading.8242
 732 002a C0F20003 		movt	r3, #:upper16:stageOfReading.8242
 733 002e 1B68     		ldr	r3, [r3, #0]
 734 0030 002B     		cmp	r3, #0
 735 0032 22D1     		bne	.L27
 736              	.LBB5:
 278:../Main.c     **** 		{
 279:../Main.c     **** 			I2C001_DataType data1;
 280:../Main.c     **** 			data1.Data1.TDF_Type = I2C_TDF_MStart;
 737              		.loc 1 280 0
 738 0034 4FF00403 		mov	r3, #4
 739 0038 7B77     		strb	r3, [r7, #29]
 281:../Main.c     **** 			data1.Data1.Data = ((address.adr.addressDevice <<1) | I2C_WRITE);
 740              		.loc 1 281 0
 741 003a 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 742 003e 4FEA4303 		lsl	r3, r3, #1
 743 0042 DBB2     		uxtb	r3, r3
 744 0044 3B77     		strb	r3, [r7, #28]
 282:../Main.c     **** 			//while(!I2C001_WriteData(&I2C001_Handle0,&data1));
 283:../Main.c     **** 			I2C001_WriteData(&I2C001_Handle0,&data1);
 745              		.loc 1 283 0
 746 0046 07F11C03 		add	r3, r7, #28
 747 004a 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 748 004e C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 749 0052 1946     		mov	r1, r3
 750 0054 FFF7FEFF 		bl	I2C001_WriteData
 284:../Main.c     **** 			stageOfReading++;
 751              		.loc 1 284 0
 752 0058 40F20003 		movw	r3, #:lower16:stageOfReading.8242
 753 005c C0F20003 		movt	r3, #:upper16:stageOfReading.8242
 754 0060 1B68     		ldr	r3, [r3, #0]
 755 0062 03F10102 		add	r2, r3, #1
 756 0066 40F20003 		movw	r3, #:lower16:stageOfReading.8242
 757 006a C0F20003 		movt	r3, #:upper16:stageOfReading.8242
 758 006e 1A60     		str	r2, [r3, #0]
 285:../Main.c     **** 
 286:../Main.c     **** 			delay(DELAY);
 759              		.loc 1 286 0
 760 0070 42F21070 		movw	r0, #10000
 761 0074 FFF7FEFF 		bl	delay
 762 0078 0BE1     		b	.L25
 763              	.L27:
 764              	.LBE5:
 287:../Main.c     **** 		}
 288:../Main.c     **** 		else if(1 == stageOfReading)
 765              		.loc 1 288 0
 766 007a 40F20003 		movw	r3, #:lower16:stageOfReading.8242
 767 007e C0F20003 		movt	r3, #:upper16:stageOfReading.8242
 768 0082 1B68     		ldr	r3, [r3, #0]
 769 0084 012B     		cmp	r3, #1
 770 0086 27D1     		bne	.L28
 771              	.LBB6:
 289:../Main.c     **** 		{
 290:../Main.c     **** 			I2C001_DataType data2;
 291:../Main.c     **** 			data2.Data1.TDF_Type = I2C_TDF_MTxData;
 772              		.loc 1 291 0
 773 0088 4FF00003 		mov	r3, #0
 774 008c 7B76     		strb	r3, [r7, #25]
 292:../Main.c     **** 			data2.Data1.Data = (address.adr.subAddress + whichByte);
 775              		.loc 1 292 0
 776 008e 97F82720 		ldrb	r2, [r7, #39]	@ zero_extendqisi2
 777 0092 40F20003 		movw	r3, #:lower16:whichByte.8243
 778 0096 C0F20003 		movt	r3, #:upper16:whichByte.8243
 779 009a 1B78     		ldrb	r3, [r3, #0]
 780 009c DBB2     		uxtb	r3, r3
 781 009e D318     		adds	r3, r2, r3
 782 00a0 DBB2     		uxtb	r3, r3
 783 00a2 3B76     		strb	r3, [r7, #24]
 293:../Main.c     **** 			//while(!I2C001_WriteData(&I2C001_Handle0,&data2));
 294:../Main.c     **** 			I2C001_WriteData(&I2C001_Handle0,&data2);
 784              		.loc 1 294 0
 785 00a4 07F11803 		add	r3, r7, #24
 786 00a8 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 787 00ac C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 788 00b0 1946     		mov	r1, r3
 789 00b2 FFF7FEFF 		bl	I2C001_WriteData
 295:../Main.c     **** 			stageOfReading++;
 790              		.loc 1 295 0
 791 00b6 40F20003 		movw	r3, #:lower16:stageOfReading.8242
 792 00ba C0F20003 		movt	r3, #:upper16:stageOfReading.8242
 793 00be 1B68     		ldr	r3, [r3, #0]
 794 00c0 03F10102 		add	r2, r3, #1
 795 00c4 40F20003 		movw	r3, #:lower16:stageOfReading.8242
 796 00c8 C0F20003 		movt	r3, #:upper16:stageOfReading.8242
 797 00cc 1A60     		str	r2, [r3, #0]
 296:../Main.c     **** 
 297:../Main.c     **** 			delay(DELAY);
 798              		.loc 1 297 0
 799 00ce 42F21070 		movw	r0, #10000
 800 00d2 FFF7FEFF 		bl	delay
 801 00d6 DCE0     		b	.L25
 802              	.L28:
 803              	.LBE6:
 298:../Main.c     **** 		}
 299:../Main.c     **** 		else if(2 == stageOfReading)
 804              		.loc 1 299 0
 805 00d8 40F20003 		movw	r3, #:lower16:stageOfReading.8242
 806 00dc C0F20003 		movt	r3, #:upper16:stageOfReading.8242
 807 00e0 1B68     		ldr	r3, [r3, #0]
 808 00e2 022B     		cmp	r3, #2
 809 00e4 25D1     		bne	.L29
 810              	.LBB7:
 300:../Main.c     **** 		{
 301:../Main.c     **** 			I2C001_DataType data3;
 302:../Main.c     **** 			data3.Data1.TDF_Type = I2C_TDF_MRStart;
 811              		.loc 1 302 0
 812 00e6 4FF00503 		mov	r3, #5
 813 00ea 7B75     		strb	r3, [r7, #21]
 303:../Main.c     **** 			data3.Data1.Data = ((address.adr.addressDevice<<1) | I2C_READ);
 814              		.loc 1 303 0
 815 00ec 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 816 00f0 4FEA4303 		lsl	r3, r3, #1
 817 00f4 DBB2     		uxtb	r3, r3
 818 00f6 43F00103 		orr	r3, r3, #1
 819 00fa DBB2     		uxtb	r3, r3
 820 00fc 3B75     		strb	r3, [r7, #20]
 304:../Main.c     **** 			//while(!I2C001_WriteData(&I2C001_Handle0,&data3));
 305:../Main.c     **** 			I2C001_WriteData(&I2C001_Handle0,&data3);
 821              		.loc 1 305 0
 822 00fe 07F11403 		add	r3, r7, #20
 823 0102 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 824 0106 C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 825 010a 1946     		mov	r1, r3
 826 010c FFF7FEFF 		bl	I2C001_WriteData
 306:../Main.c     **** 			stageOfReading++;
 827              		.loc 1 306 0
 828 0110 40F20003 		movw	r3, #:lower16:stageOfReading.8242
 829 0114 C0F20003 		movt	r3, #:upper16:stageOfReading.8242
 830 0118 1B68     		ldr	r3, [r3, #0]
 831 011a 03F10102 		add	r2, r3, #1
 832 011e 40F20003 		movw	r3, #:lower16:stageOfReading.8242
 833 0122 C0F20003 		movt	r3, #:upper16:stageOfReading.8242
 834 0126 1A60     		str	r2, [r3, #0]
 307:../Main.c     **** 
 308:../Main.c     **** 			delay(DELAY);
 835              		.loc 1 308 0
 836 0128 42F21070 		movw	r0, #10000
 837 012c FFF7FEFF 		bl	delay
 838 0130 AFE0     		b	.L25
 839              	.L29:
 840              	.LBE7:
 309:../Main.c     **** 		}
 310:../Main.c     **** 		else if(3 == stageOfReading)
 841              		.loc 1 310 0
 842 0132 40F20003 		movw	r3, #:lower16:stageOfReading.8242
 843 0136 C0F20003 		movt	r3, #:upper16:stageOfReading.8242
 844 013a 1B68     		ldr	r3, [r3, #0]
 845 013c 032B     		cmp	r3, #3
 846 013e 1FD1     		bne	.L30
 847              	.LBB8:
 311:../Main.c     **** 		{
 312:../Main.c     **** 			I2C001_DataType data4;
 313:../Main.c     **** 			data4.Data1.TDF_Type = I2C_TDF_MRxAck1;
 848              		.loc 1 313 0
 849 0140 4FF00303 		mov	r3, #3
 850 0144 7B74     		strb	r3, [r7, #17]
 314:../Main.c     **** 			data4.Data1.Data = ubyteFF;
 851              		.loc 1 314 0
 852 0146 4FF0FF03 		mov	r3, #255
 853 014a 3B74     		strb	r3, [r7, #16]
 315:../Main.c     **** 			//while(!I2C001_WriteData(&I2C001_Handle0,&data4));
 316:../Main.c     **** 			I2C001_WriteData(&I2C001_Handle0,&data4);
 854              		.loc 1 316 0
 855 014c 07F11003 		add	r3, r7, #16
 856 0150 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 857 0154 C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 858 0158 1946     		mov	r1, r3
 859 015a FFF7FEFF 		bl	I2C001_WriteData
 317:../Main.c     **** 			stageOfReading++;
 860              		.loc 1 317 0
 861 015e 40F20003 		movw	r3, #:lower16:stageOfReading.8242
 862 0162 C0F20003 		movt	r3, #:upper16:stageOfReading.8242
 863 0166 1B68     		ldr	r3, [r3, #0]
 864 0168 03F10102 		add	r2, r3, #1
 865 016c 40F20003 		movw	r3, #:lower16:stageOfReading.8242
 866 0170 C0F20003 		movt	r3, #:upper16:stageOfReading.8242
 867 0174 1A60     		str	r2, [r3, #0]
 318:../Main.c     **** 
 319:../Main.c     **** 			delay(DELAY);
 868              		.loc 1 319 0
 869 0176 42F21070 		movw	r0, #10000
 870 017a FFF7FEFF 		bl	delay
 871 017e 88E0     		b	.L25
 872              	.L30:
 873              	.LBE8:
 320:../Main.c     **** 		}
 321:../Main.c     **** 		else if(4 == stageOfReading)
 874              		.loc 1 321 0
 875 0180 40F20003 		movw	r3, #:lower16:stageOfReading.8242
 876 0184 C0F20003 		movt	r3, #:upper16:stageOfReading.8242
 877 0188 1B68     		ldr	r3, [r3, #0]
 878 018a 042B     		cmp	r3, #4
 879 018c 1FD1     		bne	.L31
 880              	.LBB9:
 322:../Main.c     **** 		{
 323:../Main.c     **** 			I2C001_DataType data5;
 324:../Main.c     **** 			data5.Data1.TDF_Type = I2C_TDF_MStop;
 881              		.loc 1 324 0
 882 018e 4FF00603 		mov	r3, #6
 883 0192 7B73     		strb	r3, [r7, #13]
 325:../Main.c     **** 			data5.Data1.Data = ubyteFF;
 884              		.loc 1 325 0
 885 0194 4FF0FF03 		mov	r3, #255
 886 0198 3B73     		strb	r3, [r7, #12]
 326:../Main.c     **** 			//while(!I2C001_WriteData(&I2C001_Handle0,&data5));
 327:../Main.c     **** 			I2C001_WriteData(&I2C001_Handle0,&data5);
 887              		.loc 1 327 0
 888 019a 07F10C03 		add	r3, r7, #12
 889 019e 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 890 01a2 C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 891 01a6 1946     		mov	r1, r3
 892 01a8 FFF7FEFF 		bl	I2C001_WriteData
 328:../Main.c     **** 			stageOfReading++;
 893              		.loc 1 328 0
 894 01ac 40F20003 		movw	r3, #:lower16:stageOfReading.8242
 895 01b0 C0F20003 		movt	r3, #:upper16:stageOfReading.8242
 896 01b4 1B68     		ldr	r3, [r3, #0]
 897 01b6 03F10102 		add	r2, r3, #1
 898 01ba 40F20003 		movw	r3, #:lower16:stageOfReading.8242
 899 01be C0F20003 		movt	r3, #:upper16:stageOfReading.8242
 900 01c2 1A60     		str	r2, [r3, #0]
 329:../Main.c     **** 
 330:../Main.c     **** 			delay(DELAY);
 901              		.loc 1 330 0
 902 01c4 42F21070 		movw	r0, #10000
 903 01c8 FFF7FEFF 		bl	delay
 904 01cc 61E0     		b	.L25
 905              	.L31:
 906              	.LBE9:
 331:../Main.c     **** 		}
 332:../Main.c     **** 		else if(5 == stageOfReading)
 907              		.loc 1 332 0
 908 01ce 40F20003 		movw	r3, #:lower16:stageOfReading.8242
 909 01d2 C0F20003 		movt	r3, #:upper16:stageOfReading.8242
 910 01d6 1B68     		ldr	r3, [r3, #0]
 911 01d8 052B     		cmp	r3, #5
 912 01da 5AD1     		bne	.L25
 913              	.LBB10:
 333:../Main.c     **** 		{
 334:../Main.c     **** 			uint16_t DataReceive2 = 0;
 914              		.loc 1 334 0
 915 01dc 4FF00003 		mov	r3, #0
 916 01e0 7B81     		strh	r3, [r7, #10]	@ movhi
 335:../Main.c     **** 			stageOfReading = 0;
 917              		.loc 1 335 0
 918 01e2 40F20003 		movw	r3, #:lower16:stageOfReading.8242
 919 01e6 C0F20003 		movt	r3, #:upper16:stageOfReading.8242
 920 01ea 4FF00002 		mov	r2, #0
 921 01ee 1A60     		str	r2, [r3, #0]
 336:../Main.c     **** 			if(I2C001_ReadData(&I2C001_Handle0,&DataReceive2))
 922              		.loc 1 336 0
 923 01f0 07F10A03 		add	r3, r7, #10
 924 01f4 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 925 01f8 C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 926 01fc 1946     		mov	r1, r3
 927 01fe FFF7FEFF 		bl	I2C001_ReadData
 337:../Main.c     **** 			{
 338:../Main.c     **** 				;
 339:../Main.c     **** 			}
 340:../Main.c     **** 
 341:../Main.c     **** 			delay(DELAY);
 928              		.loc 1 341 0
 929 0202 42F21070 		movw	r0, #10000
 930 0206 FFF7FEFF 		bl	delay
 342:../Main.c     **** 
 343:../Main.c     **** 			address.dane[whichByte] = (uint8_t)DataReceive2;
 931              		.loc 1 343 0
 932 020a 40F20003 		movw	r3, #:lower16:whichByte.8243
 933 020e C0F20003 		movt	r3, #:upper16:whichByte.8243
 934 0212 1B78     		ldrb	r3, [r3, #0]
 935 0214 DBB2     		uxtb	r3, r3
 936 0216 7A89     		ldrh	r2, [r7, #10]
 937 0218 D2B2     		uxtb	r2, r2
 938 021a 07F12801 		add	r1, r7, #40
 939 021e CB18     		adds	r3, r1, r3
 940 0220 03F8082C 		strb	r2, [r3, #-8]
 344:../Main.c     **** 
 345:../Main.c     **** 			whichByte++;
 941              		.loc 1 345 0
 942 0224 40F20003 		movw	r3, #:lower16:whichByte.8243
 943 0228 C0F20003 		movt	r3, #:upper16:whichByte.8243
 944 022c 1B78     		ldrb	r3, [r3, #0]
 945 022e DBB2     		uxtb	r3, r3
 946 0230 03F10103 		add	r3, r3, #1
 947 0234 DAB2     		uxtb	r2, r3
 948 0236 40F20003 		movw	r3, #:lower16:whichByte.8243
 949 023a C0F20003 		movt	r3, #:upper16:whichByte.8243
 950 023e 1A70     		strb	r2, [r3, #0]
 346:../Main.c     **** 			stageOfReading++;
 951              		.loc 1 346 0
 952 0240 40F20003 		movw	r3, #:lower16:stageOfReading.8242
 953 0244 C0F20003 		movt	r3, #:upper16:stageOfReading.8242
 954 0248 1B68     		ldr	r3, [r3, #0]
 955 024a 03F10102 		add	r2, r3, #1
 956 024e 40F20003 		movw	r3, #:lower16:stageOfReading.8242
 957 0252 C0F20003 		movt	r3, #:upper16:stageOfReading.8242
 958 0256 1A60     		str	r2, [r3, #0]
 347:../Main.c     **** 
 348:../Main.c     **** 			if(whichByte == 6)
 959              		.loc 1 348 0
 960 0258 40F20003 		movw	r3, #:lower16:whichByte.8243
 961 025c C0F20003 		movt	r3, #:upper16:whichByte.8243
 962 0260 1B78     		ldrb	r3, [r3, #0]
 963 0262 DBB2     		uxtb	r3, r3
 964 0264 062B     		cmp	r3, #6
 965 0266 14D1     		bne	.L25
 349:../Main.c     **** 			{
 350:../Main.c     **** 				readingAllowed = FALSE;
 966              		.loc 1 350 0
 967 0268 40F20003 		movw	r3, #:lower16:readingAllowed
 968 026c C0F20003 		movt	r3, #:upper16:readingAllowed
 969 0270 4FF00002 		mov	r2, #0
 970 0274 1A70     		strb	r2, [r3, #0]
 351:../Main.c     **** 
 352:../Main.c     **** 				whichByte = 0;
 971              		.loc 1 352 0
 972 0276 40F20003 		movw	r3, #:lower16:whichByte.8243
 973 027a C0F20003 		movt	r3, #:upper16:whichByte.8243
 974 027e 4FF00002 		mov	r2, #0
 975 0282 1A70     		strb	r2, [r3, #0]
 353:../Main.c     **** 				stageOfReading = 0;
 976              		.loc 1 353 0
 977 0284 40F20003 		movw	r3, #:lower16:stageOfReading.8242
 978 0288 C0F20003 		movt	r3, #:upper16:stageOfReading.8242
 979 028c 4FF00002 		mov	r2, #0
 980 0290 1A60     		str	r2, [r3, #0]
 981              	.L25:
 982              	.LBE10:
 354:../Main.c     **** 			}
 355:../Main.c     **** 		}
 356:../Main.c     **** 	}
 357:../Main.c     **** }
 983              		.loc 1 357 0
 984 0292 07F12807 		add	r7, r7, #40
 985 0296 BD46     		mov	sp, r7
 986 0298 80BD     		pop	{r7, pc}
 987              		.cfi_endproc
 988              	.LFE120:
 990 029a 00BF     		.bss
 991              		.align	2
 992              	stageOfReading.8242:
 993 0000 00000000 		.space	4
 994              	whichByte.8243:
 995 0004 00       		.space	1
 996 0005 000000   		.align	2
 997              	stageOfReading.8208:
 998 0008 00000000 		.space	4
 999              	whichByte.8209:
 1000 000c 00       		.space	1
 1001 000d 000000   		.text
 1002              	.Letext0:
 1003              		.file 2 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 1004              		.file 3 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 1005              		.file 4 "C:\\DAVE3_workspace\\mojWorkspace\\BachelorLSM9DS1\\Dave\\Generated\\inc\\DAVESupport/../
 1006              		.file 5 "C:\\DAVE3_workspace\\mojWorkspace\\BachelorLSM9DS1\\Dave\\Generated\\inc\\DAVESupport/../
 1007              		.file 6 "C:\\DAVE3_workspace\\mojWorkspace\\BachelorLSM9DS1\\Dave\\Generated\\inc\\DAVESupport/../
 1008              		.file 7 "C:\\DAVE3_workspace\\mojWorkspace\\BachelorLSM9DS1\\Dave\\Generated\\inc\\DAVESupport/../
 1009              		.file 8 "../LSM9DS1_Types.h"
 1010              		.file 9 "../LSM9DS1_Driver.h"
 1011              		.file 10 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
 1012              		.file 11 "C:\\DAVE3_workspace\\mojWorkspace\\BachelorLSM9DS1\\Dave\\Generated\\inc\\DAVESupport/..
DEFINED SYMBOLS
                            *ABS*:00000000 Main.c
                            *COM*:00000004 TimerId
                            *COM*:00000004 Status
                            *COM*:00000004 WriteTimerId
                            *COM*:00000004 WriteTimerStatus
                            *COM*:00000004 TimerIdReadBytes
                            *COM*:00000004 StatusReadBytes
                            *COM*:00000028 settings
                            *COM*:0000000c gBias
                            *COM*:0000000c aBias
                            *COM*:0000000c mBias
                            *COM*:00000006 gBiasRaw
                            *COM*:00000006 aBiasRaw
                            *COM*:00000006 mBiasRaw
                            *COM*:00000001 _autoCalc
                            *COM*:00000001 _mAddress
                            *COM*:00000001 _xgAddress
                            *COM*:00000004 gRes
                            *COM*:00000004 aRes
                            *COM*:00000004 mRes
                            *COM*:00000002 gx
                            *COM*:00000002 gy
                            *COM*:00000002 gz
                            *COM*:00000002 ax
                            *COM*:00000002 ay
                            *COM*:00000002 az
                            *COM*:00000002 mx
                            *COM*:00000002 my
                            *COM*:00000002 mz
                            *COM*:00000002 temperature
C:\Users\Mateusz\AppData\Local\Temp\ccVZEz1y.s:52     .data:00000000 readingAllowed
                            *COM*:00000078 pomiary
C:\Users\Mateusz\AppData\Local\Temp\ccVZEz1y.s:56     .text.main:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccVZEz1y.s:61     .text.main:00000000 main
C:\Users\Mateusz\AppData\Local\Temp\ccVZEz1y.s:281    .text.initLSM9DS1:00000000 initLSM9DS1
C:\Users\Mateusz\AppData\Local\Temp\ccVZEz1y.s:342    .text.timerHandlerReadByte1:00000000 timerHandlerReadByte1
C:\Users\Mateusz\AppData\Local\Temp\ccVZEz1y.s:276    .text.initLSM9DS1:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccVZEz1y.s:337    .text.timerHandlerReadByte1:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccVZEz1y.s:997    .bss:00000008 stageOfReading.8208
C:\Users\Mateusz\AppData\Local\Temp\ccVZEz1y.s:999    .bss:0000000c whichByte.8209
C:\Users\Mateusz\AppData\Local\Temp\ccVZEz1y.s:694    .text.timerHandlerReadByte:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccVZEz1y.s:699    .text.timerHandlerReadByte:00000000 timerHandlerReadByte
C:\Users\Mateusz\AppData\Local\Temp\ccVZEz1y.s:992    .bss:00000000 stageOfReading.8242
C:\Users\Mateusz\AppData\Local\Temp\ccVZEz1y.s:994    .bss:00000004 whichByte.8243
C:\Users\Mateusz\AppData\Local\Temp\ccVZEz1y.s:991    .bss:00000000 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.35166846b5321d4273ad8c4248893ac3
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.4a863fbae1c79f0db26da3ce2dc30d02
                           .group:00000000 wm4.CCU8PWMLIB.h.74.725ec81203769525cc7a424597055f47
                           .group:00000000 wm4.MOTORLIB.h.62.951091d95913dd2ff36d761323a1771d
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.uc_id.h.35.fa57ecd9f559d2767f56c96da2848c12
                           .group:00000000 wm4.CLK001_Const.h.50.e5e9c2ddc89f4cc9e7b93e9648fa94e4
                           .group:00000000 wm4.CLK001_Conf.h.81.82a8db895dc146da001475dd68223522
                           .group:00000000 wm4.SYSTM001.h.64.6ecb31c49bc3e7691644fdcdfc11b5cd
                           .group:00000000 wm4.Usic.h.58.a3e6728d1d20f5a5e52f483a06098d7b
                           .group:00000000 wm4.I2C001.h.97.5277d52889d6c741e048ea45ee1277b5
                           .group:00000000 wm4.I2C001_Conf.h.58.e471e519f7471a50493b6f4fe912ee0d
                           .group:00000000 wm4.NVIC002_Conf.h.63.74cd705315f747fa337668af570b2988
                           .group:00000000 wm4.LSM9DS1_Driver.h.9.225085f752270af24a0df342ed7d3479
                           .group:00000000 wm4.LSM9DS1_Registers.h.9.72af380d6da01de607f77d245bf32825
                           .group:00000000 wm4.stdio.h.31.f48311dde756a2aec27351b58a280fb9
                           .group:00000000 wm4.stddef.h.161.e50ff8a9d5d1abbc15641da28ac571bf
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.161.c6104a0666cf681b6269ddc9b4f516d4
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76

UNDEFINED SYMBOLS
DAVE_Init
calibrate
SYSTM001_CreateTimer
SYSTM001_StartTimer
calcAccel
init
begin
I2C001_Handle0
I2C001_WriteData
delay
I2C001_ReadData
